"use strict";(self.webpackChunkLunarVim_com=self.webpackChunkLunarVim_com||[]).push([[259],{4483:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-73b921f0",path:"/Payment_Systems/02-check-services.html",title:"Check Services",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"About",slug:"about",children:[]},{level:2,title:"cc()",slug:"cc",children:[{level:3,title:"About",slug:"about-1",children:[]},{level:3,title:"Example use",slug:"example-use",children:[]}]},{level:2,title:"cr()",slug:"cr",children:[{level:3,title:"About",slug:"about-2",children:[]},{level:3,title:"Example use",slug:"example-use-1",children:[]}]},{level:2,title:"gc()",slug:"gc",children:[{level:3,title:"About",slug:"about-3",children:[]},{level:3,title:"Example use",slug:"example-use-2",children:[]}]},{level:2,title:"pmo()",slug:"pmo",children:[{level:3,title:"About",slug:"about-4",children:[]},{level:3,title:"Example use",slug:"example-use-3",children:[]}]},{level:2,title:"all()",slug:"all",children:[{level:3,title:"About",slug:"about-5",children:[]},{level:3,title:"Example use",slug:"example-use-4",children:[]}]}],filePathRelative:"Payment_Systems/02-check-services.md",git:{updatedTime:1636180046e3,contributors:[{name:"Antonio Hickey",email:"antoniohickey99@gmail.com",commits:1}]}}},8379:(n,a,s)=>{s.r(a),s.d(a,{default:()=>l});const e=(0,s(6252).uE)('<h1 id="check-services" tabindex="-1"><a class="header-anchor" href="#check-services" aria-hidden="true">#</a> Check Services</h1><h2 id="about" tabindex="-1"><a class="header-anchor" href="#about" aria-hidden="true">#</a> About</h2><p>The Federal Reserve Check Services offer a suite of electronic and paper check processing options.</p><p>FedPy allows you to quickly fetch data on these Check Services.</p><h2 id="cc" tabindex="-1"><a class="header-anchor" href="#cc" aria-hidden="true">#</a> cc()</h2><h3 id="about-1" tabindex="-1"><a class="header-anchor" href="#about-1" aria-hidden="true">#</a> About</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>FedPy<span class="token punctuation">.</span>Check_Services<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cc<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Returns a <code>DataFrame</code> of annual data on Commercial Collected check&#39;s processed by the Federal Reserve.</p><p>This command takes in no parameters.</p><h3 id="example-use" tabindex="-1"><a class="header-anchor" href="#example-use" aria-hidden="true">#</a> Example use</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> FedPy\n\ncomm_collected <span class="token operator">=</span> FedPy<span class="token punctuation">.</span>Check_Services<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cc<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>comm_collected<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="output" tabindex="-1"><a class="header-anchor" href="#output" aria-hidden="true">#</a> Output:</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Year  ...  Average value per check (dollars)\n2020  ...                             2091.0\n2019  ...                             1895.0\n2018  ...                             1790.0\n2017  ...                             1638.0\n2016  ...                             1543.0\n2015  ...                             1487.0\n2014  ...                             1412.0\n2013  ...                             1329.0\n2012  ...                             1273.0\n2011  ...                             1187.0\n...   ...                             ...\n1989  ...                              679.0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="cr" tabindex="-1"><a class="header-anchor" href="#cr" aria-hidden="true">#</a> cr()</h2><h3 id="about-2" tabindex="-1"><a class="header-anchor" href="#about-2" aria-hidden="true">#</a> About</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>FedPy<span class="token punctuation">.</span>Check_Services<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cr<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Returns a <code>DataFrame</code> of annual data on Commercial Returned check&#39;s processed by the Federal Reserve.</p><p>This command takes in no parameters.</p><h3 id="example-use-1" tabindex="-1"><a class="header-anchor" href="#example-use-1" aria-hidden="true">#</a> Example use</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> FedPy\n\ncomm_returned <span class="token operator">=</span> FedPy<span class="token punctuation">.</span>Check_Services<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cr<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>comm_returned<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="output-1" tabindex="-1"><a class="header-anchor" href="#output-1" aria-hidden="true">#</a> Output:</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Year  ...  Average value per check (dollars)\n2020  ...                             2794.0\n2019  ...                             2125.0\n2018  ...                             1949.0\n2017  ...                             1705.0\n2016  ...                             1605.0\n2015  ...                             1529.0\n2014  ...                             1404.0\n2013  ...                             1301.0\n2012  ...                             1190.0\n2011  ...                             1074.0\n...   ...                             ...\n1989  ...                                NaN\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="gc" tabindex="-1"><a class="header-anchor" href="#gc" aria-hidden="true">#</a> gc()</h2><h3 id="about-3" tabindex="-1"><a class="header-anchor" href="#about-3" aria-hidden="true">#</a> About</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>FedPy<span class="token punctuation">.</span>Check_Services<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>gc<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Returns a <code>DataFrame</code> of annual data on Government Check&#39;s processed by the Federal Reserve.</p><p>This command takes in no parameters.</p><h3 id="example-use-2" tabindex="-1"><a class="header-anchor" href="#example-use-2" aria-hidden="true">#</a> Example use</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> FedPy\n\ngov_checks <span class="token operator">=</span> FedPy<span class="token punctuation">.</span>Check_Services<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>gc<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>gov_checks<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="output-2" tabindex="-1"><a class="header-anchor" href="#output-2" aria-hidden="true">#</a> Output:</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Year  ...  Average value per check (dollars)\n2020  ...                            24672.0\n2019  ...                             2893.0\n2018  ...                             2784.0\n2017  ...                             2595.0\n2016  ...                             2625.0\n2015  ...                             2413.0\n2014  ...                             2259.0\n2013  ...                             1864.0\n2012  ...                             1649.0\n2011  ...                             1523.0\n...   ...                             ...\n1989  ...                             1174.0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="pmo" tabindex="-1"><a class="header-anchor" href="#pmo" aria-hidden="true">#</a> pmo()</h2><h3 id="about-4" tabindex="-1"><a class="header-anchor" href="#about-4" aria-hidden="true">#</a> About</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>fedpy<span class="token punctuation">.</span>check_services<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pmo<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>returns a <code>dataframe</code> of annual data on postal money order&#39;s processed by the federal reserve.</p><p>this command takes in no parameters.</p><h3 id="example-use-3" tabindex="-1"><a class="header-anchor" href="#example-use-3" aria-hidden="true">#</a> Example use</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> fedpy\n\npostal_money_orders <span class="token operator">=</span> fedpy<span class="token punctuation">.</span>check_services<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pmo<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>postal_money_orders<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="output-3" tabindex="-1"><a class="header-anchor" href="#output-3" aria-hidden="true">#</a> Output:</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>year  ...  average value per postal money order (dollars)\n2020  ...                                           269.0\n2019  ...                                           266.0\n2018  ...                                           254.0\n2017  ...                                           243.0\n2016  ...                                           235.0\n2015  ...                                           226.0\n2014  ...                                           220.0\n2013  ...                                           220.0\n2012  ...                                           204.0\n2011  ...                                           197.0\n...   ...                                           ...\n1989  ...                                            97.0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="all" tabindex="-1"><a class="header-anchor" href="#all" aria-hidden="true">#</a> all()</h2><h3 id="about-5" tabindex="-1"><a class="header-anchor" href="#about-5" aria-hidden="true">#</a> About</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>fedpy<span class="token punctuation">.</span>check_services<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>returns a <code>dataframe</code> of annual data on postal money order&#39;s, government checks, commercial collected checks, and commercial returned checks all aggregated together. this command takes in no parameters.</p><h3 id="example-use-4" tabindex="-1"><a class="header-anchor" href="#example-use-4" aria-hidden="true">#</a> Example use</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> fedpy\n\nall_check_services <span class="token operator">=</span> fedpy<span class="token punctuation">.</span>check_services<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>all_check_services<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="output-4" tabindex="-1"><a class="header-anchor" href="#output-4" aria-hidden="true">#</a> Output:</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Year  Volume (millions of items)  Value (billions of dollars)\n2020                      3944.0                      10014.0\n2019                      4548.0                       8546.0\n2018                      4905.0                       8711.0\n2017                      5325.0                       8658.0\n2016                      5419.0                       8314.0\n2015                      5637.0                       8325.0\n2014                      5937.0                       8323.0\n2013                      6214.0                       8192.0\n2012                      6680.0                       8431.0\n2011                      7023.0                       8273.0\n...                       ...                          ...\n1989                     18863.0                      12971.0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',48),p={},l=(0,s(3744).Z)(p,[["render",function(n,a){return e}]])},3744:(n,a)=>{a.Z=(n,a)=>{const s=n.__vccOpts||n;for(const[n,e]of a)s[n]=e;return s}}}]);